
// identify UTXOs

-> UTXOs() #gives txid and output index
## IMPLEMENTAION FOR ARBITRARY BLOCK - INPROGRESS - ONHOLD	
// choose amount and receiver pubkey

-> neededUTXO(amount)
   
-> make_inp()

-> pay(amount, to)

// transaction is now made, we broadcast

-> broadcast(tr)

// we listen to transaction
// [ISSUE] sometimes tx length exceeds, is it ok to inc recFrom?
## TESTING RECVFROM 2048 IN ACTUAL LAN -- ONHOLD

-> we check its signature, reject if invalid  
// we decrypt the signature, we check prev txn , output index.
// we use that amount, to check if outputs <= input
## TESTING FOR MULTIPLE VERIFY SIGNATURE -- DONE

## TESTING FOR ACTUAL TRANSACTION DATA IN MEMPOOL/ BLOCK -- DONE
## by verifying if input referenced exists in UTXO set

## REMOVE REFFERENCED PREV TRAN OUTPUT IF VALID FROM UTXO -- DONE

// then we update available UTXOs by removing ones we used as inp
// we update utxo.tmp if transaction. UTXOs.txt if block
// if UTXO isn't available, we reject.

## MAKE MAIN TO USE UTXO.tmp for available UTXO -- DONE
	#-> subtask clean output index reference bug -- DONE

## CLEAN MAIN -- okayish progress, IN HOLD

## UPDATE UTXO.tmp from received transactions --DONE
	#-> add mempool UTXOs to UTXO.tmp

## FIX NEGATIVE FEE AMOUNT BUG ON SPENDING LAST UTXO -- HOLD

## DISPLAY BALANCE -- HOLD

## PRETTY PRINT EVERYWHERE -- PRIORITY HOLD 

## use multiple keys to test -- DONE

## MINING

## add coinbase txn -- IN PROGRESS

## broadcast block once mined

## MAIN_F update where it receives blocks
##	-> validates if block header merkle root hash is crct
##	-> uses transactions inside the block txns to update UTXOs.txt
##	-> python reset to have UTXO.tmp use for mempool

## CODE CLEANUP Import common functions from a py avoid duplicates - HOLD
      
-> start mining (miner.py)

// in script, we can choose arbitrary time to start mining.
// mining is done with current mempool.txt txs.

-> add coinbase, with sum of fees, and current block reward

-> mine with bruteforcing nonce, if ok send block data with coinbase

-> //mempool is limited in size, how many characters can I send?
   //tr tr ah we can send instead of in bulk. in case some
   //new node requests it.


----------------------------------------------------------------

intermediary steps/plans

// so.. I'm removing an UTXO after entering it to mempool
// then I get a block that has already added the tx.


// I have to add a mechanism to make permanent changes to
// UTXO.txt only after block is added.

-> UTXO.tmp

// when there's a block received. we deleteUTXO() in UTXO.txt
// if some input doesn't exist, we reject block

