
// identify UTXOs

-> UTXOs() #gives txid and output index

// choose amount and receiver pubkey

-> neededUTXO(amount)
   
-> make_inp()

-> pay(amount, to)

// transaction is now made, we broadcast

-> broadcast(tr)

// we listen to transaction
// [ISSUE] sometimes tx length exceeds, is it ok to inc recFrom?

-> we check its signature, reject if invalid  
// we decrypt the signature, we check prev txn , output index.
// we use that amount, to check if outputs <= input

// then we update available UTXOs by removing ones we used as inp
// we update utxo.tmp if transaction. UTXOs.txt if block
// if UTXO isn't available, we reject.


// we use UTXO.tmp as balance in main.py

-> start mining (miner.py)

// in script, we can choose arbitrary time to start mining.
// mining is done with current mempool.txt txs.

-> add coinbase, with sum of fees, and current block reward

-> mine with bruteforcing nonce, if ok send block data with coinbase

-> //mempool is limited in size, how many characters can I send?
   //tr tr ah we can send instead of in bulk. in case some
   //new node requests it.


----------------------------------------------------------------

intermediary steps/plans

// so.. I'm removing an UTXO after entering it to mempool
// then I get a block that has already added the tx.


// I have to add a mechanism to make permanent changes to
// UTXO.txt only after block is added.

-> UTXO.tmp

// when there's a block received. we deleteUTXO() in UTXO.txt
// if some input doesn't exist, we reject block

